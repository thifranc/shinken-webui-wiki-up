# Standalone Web UI
The Web UI embeds its own Web server [Python Bottle](http://bottlepy.org/docs/dev/index.html). This built-in non-threading HTTP server is based on wsgiref WSGIServer may become a performance bottleneck when server load increases. It is recommended, at least, to install an alternative multi-threaded server like [CherryPy](http://www.cherrypy.org/) which is also recommended as a dependency for the Shinken framework.

A simple installation of the Python package is enough and no extra-configuration is necessary fot CherryPy to be used as a backend server for the Web UI.
```
pip install CherryPy
```

# Using nginx as a frontend server
Using a reverse proxy server as a frontend for the Web UI allows to improve performances especially for static files (javascript, css, ...). The configuration is very easy with nginx.
```
   # Install nginx
   apt-get install nginx

   # Delete default virtual host
   rm /etc/nginx/sites-available/default

   # Create and activate a new virtual host
   vi /etc/nginx/sites-available/shinken
   => See belon for file content ...

   # Activate the new virtual host
   ln -s /etc/nginx/sites-available/shinken /etc/nginx/site-enabled/shinken

   # Restart nginx
   /etc/init.d/nginx restart
```

## nginx HTTP configuration
```
# /etc/nginx/sites-available/shinken
# Shinken WebUI
#
server {
    # IPv4 support
    listen 80;
    # IPv6 support
    listen [::]:80;

    server_name shinken;

    access_log          /var/log/nginx/shinken_access.log;
    error_log           /var/log/nginx/shinken_error.log;

    # Avoid robots
    location /robots.txt {
        return 200 "User-agent: *\nDisallow: /";
    }

    # Redirection
    location / {
        # Set the adequate variables so that the WebUI will
        # know what hostname it has, this is useful for redirects
        proxy_set_header   X-Real-IP $remote_addr;
        proxy_set_header   Host      $http_host;
        proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header   X-Forwarded-Proto $scheme;

        # Replace 7767 (default) by the port your shinken WebUI is listening on.
        proxy_pass http://localhost:7767;
        proxy_read_timeout  60;
    }

    # Serve static content directly
    location /static/(.*\/)? {
        try_files htdocs/$uri plugins/$1/htdocs/$uri @webui;
    }
    location @webui {
        root /var/lib/shinken/modules/webui/;
    }
}
```

## nginx HTTPS configuration
```
# /etc/nginx/sites-available/shinken_ssl
# Shinken WebUI
#
server {
    # IPv4 support
    listen 443;
    # IPv6 support
    listen [::]:443;

    server_name shinken;

    access_log           /var/log/nginx/shinken_access.log;
    error_log            /var/log/nginx/shinken_error.log;

    ssl on;
    ssl_certificate      /etc/nginx/ssl/shinken.crt;
    ssl_certificate_key  /etc/nginx/ssl/shinken.key;

    # Avoid robots
    location /robots.txt {
        return 200 "User-agent: *\nDisallow: /";
    }

    # Redirection
    location / {
        # Set the adequate variables so that the WebUI will
        # know what hostname it has, this is useful for redirects
        proxy_set_header   X-Real-IP $remote_addr;
        proxy_set_header   Host      $http_host;
        proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header   X-Forwarded-Proto $scheme;

        # Replace 7767 (default) by the port your shinken WebUI is listening on.
        proxy_pass http://localhost:7767;
        proxy_read_timeout  60;
    }

    # Serve static content directly
    location /static/(.*\/)? {
        try_files htdocs/$uri plugins/$1/htdocs/$uri @webui;
    }
    location @webui {
        root /var/lib/shinken/modules/webui/;
    }
}
```